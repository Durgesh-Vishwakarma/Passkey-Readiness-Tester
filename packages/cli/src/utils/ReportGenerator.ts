
import fs from 'fs';
import path from 'path';

export interface TestResult {
  timestamp: string;
  server: string;
  tests: {
    [key: string]: {
      status: 'passed' | 'failed' | 'warning';
      message: string;
      details?: any;
    };
  };
  summary: {
    total: number;
    passed: number;
    failed: number;
    warnings: number;
  };
}

export interface SecurityAnalysisResult {
  serverUrl: string;
  timestamp: string;
  findings: Array<{
    id: string;
    title: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
    category: string;
    recommendation: string;
    evidence?: any;
  }>;
  summary: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
    securityScore: number;
  };
}

export class ReportGenerator {
  constructor() {}

  async generateHTML(testResults: TestResult | SecurityAnalysisResult, outputDir: string, template: string = 'standard'): Promise<void> {
    const htmlContent = this.generateHTMLContent(testResults, template);
    const filePath = path.join(outputDir, 'webauthn-report.html');
    fs.writeFileSync(filePath, htmlContent);
  }

  async generatePDF(testResults: TestResult | SecurityAnalysisResult, outputDir: string, template: string = 'standard'): Promise<void> {
    // For now, generate HTML and note that PDF conversion would require additional dependencies
    const htmlContent = this.generateHTMLContent(testResults, template);
    const filePath = path.join(outputDir, 'webauthn-report-for-pdf.html');
    fs.writeFileSync(filePath, htmlContent);
    
    // Note: PDF generation would typically use puppeteer or similar
    console.warn('PDF generation requires additional setup. HTML report generated instead.');
  }

  async generateJSON(testResults: TestResult | SecurityAnalysisResult, outputDir: string): Promise<void> {
    const filePath = path.join(outputDir, 'webauthn-report.json');
    fs.writeFileSync(filePath, JSON.stringify(testResults, null, 2));
  }

  private generateHTMLContent(results: TestResult | SecurityAnalysisResult, template: string): string {
    const isSecurityResult = 'findings' in results;
    
    let html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebAuthn ${isSecurityResult ? 'Security' : 'Test'} Report</title>
    <style>
        ${this.getCSS(template)}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>WebAuthn ${isSecurityResult ? 'Security Analysis' : 'Test'} Report</h1>
            <div class="meta">
                <p><strong>Server:</strong> ${isSecurityResult ? results.serverUrl : (results as TestResult).server}</p>
                <p><strong>Generated:</strong> ${results.timestamp}</p>
            </div>
        </header>

        <main>
            ${isSecurityResult ? this.generateSecuritySummary(results as SecurityAnalysisResult) : this.generateTestSummary(results as TestResult)}
            
            <section class="details">
                <h2>Detailed Results</h2>
                ${isSecurityResult ? this.generateSecurityDetails(results as SecurityAnalysisResult) : this.generateTestDetails(results as TestResult)}
            </section>
        </main>

        <footer>
            <p>Generated by WebAuthn Tester CLI</p>
        </footer>
    </div>
</body>
</html>`;

    return html;
  }

  private generateTestSummary(results: TestResult): string {
    const { summary } = results;
    return `
      <section class="summary">
        <h2>Test Summary</h2>
        <div class="summary-stats">
          <div class="stat">
            <span class="number">${summary.total}</span>
            <span class="label">Total Tests</span>
          </div>
          <div class="stat passed">
            <span class="number">${summary.passed}</span>
            <span class="label">Passed</span>
          </div>
          <div class="stat failed">
            <span class="number">${summary.failed}</span>
            <span class="label">Failed</span>
          </div>
          <div class="stat warning">
            <span class="number">${summary.warnings}</span>
            <span class="label">Warnings</span>
          </div>
        </div>
      </section>`;
  }

  private generateSecuritySummary(results: SecurityAnalysisResult): string {
    const { summary } = results;
    return `
      <section class="summary">
        <h2>Security Summary</h2>
        <div class="security-score">
          <div class="score ${this.getScoreClass(summary.securityScore)}">
            <span class="number">${summary.securityScore}</span>
            <span class="label">Security Score</span>
          </div>
        </div>
        <div class="summary-stats">
          <div class="stat critical">
            <span class="number">${summary.critical}</span>
            <span class="label">Critical</span>
          </div>
          <div class="stat high">
            <span class="number">${summary.high}</span>
            <span class="label">High</span>
          </div>
          <div class="stat medium">
            <span class="number">${summary.medium}</span>
            <span class="label">Medium</span>
          </div>
          <div class="stat low">
            <span class="number">${summary.low}</span>
            <span class="label">Low</span>
          </div>
          <div class="stat info">
            <span class="number">${summary.info}</span>
            <span class="label">Info</span>
          </div>
        </div>
      </section>`;
  }

  private generateTestDetails(results: TestResult): string {
    let details = '';
    
    Object.entries(results.tests).forEach(([testName, result]) => {
      const statusClass = result.status === 'passed' ? 'success' : result.status === 'failed' ? 'error' : 'warning';
      const statusIcon = result.status === 'passed' ? '‚úÖ' : result.status === 'failed' ? '‚ùå' : '‚ö†Ô∏è';
      
      details += `
        <div class="test-result ${statusClass}">
          <h3>${statusIcon} ${testName}</h3>
          <p><strong>Status:</strong> ${result.status}</p>
          <p><strong>Message:</strong> ${result.message}</p>
          ${result.details ? `<details><summary>Details</summary><pre>${JSON.stringify(result.details, null, 2)}</pre></details>` : ''}
        </div>`;
    });

    return details;
  }

  private generateSecurityDetails(results: SecurityAnalysisResult): string {
    let details = '';
    
    const severityOrder = ['critical', 'high', 'medium', 'low', 'info'];
    const groupedFindings = severityOrder.reduce((groups, severity) => {
      groups[severity] = results.findings.filter(f => f.severity === severity);
      return groups;
    }, {} as Record<string, typeof results.findings>);

    Object.entries(groupedFindings).forEach(([severity, findings]) => {
      if (findings.length === 0) return;

      const severityIcon = {
        critical: 'üî¥',
        high: 'üü†', 
        medium: 'üü°',
        low: 'üîµ',
        info: '‚ÑπÔ∏è'
      }[severity] || '‚Ä¢';

      details += `<div class="severity-group ${severity}">`;
      details += `<h3>${severityIcon} ${severity.toUpperCase()} (${findings.length})</h3>`;
      
      findings.forEach(finding => {
        details += `
          <div class="finding">
            <h4>${finding.title}</h4>
            <p><strong>Category:</strong> ${finding.category}</p>
            <p><strong>Description:</strong> ${finding.description}</p>
            <p><strong>Recommendation:</strong> ${finding.recommendation}</p>
            ${finding.evidence ? `<details><summary>Evidence</summary><pre>${JSON.stringify(finding.evidence, null, 2)}</pre></details>` : ''}
          </div>`;
      });
      
      details += '</div>';
    });

    return details;
  }

  private getScoreClass(score: number): string {
    if (score >= 900) return 'excellent';
    if (score >= 700) return 'good';
    if (score >= 400) return 'fair';
    return 'poor';
  }

  private getCSS(template: string): string {
    const baseCSS = `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f5f5f5;
      }
      
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: white;
        min-height: 100vh;
      }
      
      header {
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 20px;
        margin-bottom: 30px;
      }
      
      h1 {
        color: #2563eb;
        font-size: 2.5em;
        margin-bottom: 10px;
      }
      
      .meta p {
        color: #666;
        margin: 5px 0;
      }
      
      .summary {
        background: #f8fafc;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 30px;
      }
      
      .summary h2 {
        color: #1e40af;
        margin-bottom: 20px;
      }
      
      .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 20px;
      }
      
      .stat {
        text-align: center;
        padding: 15px;
        background: white;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }
      
      .stat .number {
        display: block;
        font-size: 2em;
        font-weight: bold;
        color: #374151;
      }
      
      .stat .label {
        color: #6b7280;
        font-size: 0.9em;
      }
      
      .stat.passed .number { color: #059669; }
      .stat.failed .number { color: #dc2626; }
      .stat.warning .number { color: #d97706; }
      .stat.critical .number { color: #dc2626; }
      .stat.high .number { color: #ea580c; }
      .stat.medium .number { color: #ca8a04; }
      .stat.low .number { color: #2563eb; }
      .stat.info .number { color: #6b7280; }
      
      .security-score {
        text-align: center;
        margin-bottom: 20px;
      }
      
      .score {
        display: inline-block;
        padding: 20px 40px;
        border-radius: 50%;
        margin-bottom: 20px;
      }
      
      .score .number {
        display: block;
        font-size: 3em;
        font-weight: bold;
      }
      
      .score.excellent { background: #dcfce7; color: #166534; }
      .score.good { background: #fef3c7; color: #92400e; }
      .score.fair { background: #fecaca; color: #991b1b; }
      .score.poor { background: #fee2e2; color: #991b1b; }
      
      .details {
        margin-top: 40px;
      }
      
      .details h2 {
        color: #1e40af;
        margin-bottom: 20px;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 10px;
      }
      
      .test-result, .finding {
        margin-bottom: 20px;
        padding: 20px;
        border-radius: 6px;
        border-left: 4px solid #e5e7eb;
      }
      
      .test-result.success { border-left-color: #10b981; background: #f0fdf4; }
      .test-result.error { border-left-color: #ef4444; background: #fef2f2; }
      .test-result.warning { border-left-color: #f59e0b; background: #fffbeb; }
      
      .severity-group {
        margin-bottom: 30px;
      }
      
      .severity-group h3 {
        padding: 10px 15px;
        border-radius: 6px 6px 0 0;
        margin-bottom: 0;
      }
      
      .severity-group.critical h3 { background: #fee2e2; color: #991b1b; }
      .severity-group.high h3 { background: #fed7aa; color: #9a3412; }
      .severity-group.medium h3 { background: #fef3c7; color: #92400e; }
      .severity-group.low h3 { background: #dbeafe; color: #1e40af; }
      .severity-group.info h3 { background: #f3f4f6; color: #374151; }
      
      .finding {
        border-left: none;
        margin-top: 0;
        border-radius: 0;
        background: white;
        border: 1px solid #e5e7eb;
        border-top: none;
      }
      
      .finding:last-child {
        border-radius: 0 0 6px 6px;
      }
      
      .finding h4 {
        color: #1f2937;
        margin-bottom: 10px;
      }
      
      details {
        margin-top: 10px;
      }
      
      summary {
        cursor: pointer;
        color: #2563eb;
        font-weight: 500;
      }
      
      pre {
        background: #f3f4f6;
        padding: 10px;
        border-radius: 4px;
        overflow-x: auto;
        font-size: 0.9em;
        margin-top: 10px;
      }
      
      footer {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
        text-align: center;
        color: #6b7280;
      }
    `;

    if (template === 'detailed') {
      return baseCSS + `
        .container { max-width: 1400px; }
        .finding { padding: 25px; }
        details { margin-top: 15px; }
        summary { font-size: 1.1em; }
      `;
    }

    if (template === 'executive') {
      return baseCSS + `
        .details { display: none; }
        .summary { padding: 40px; }
        .stat { padding: 20px; }
        .score { padding: 30px 50px; }
      `;
    }

    return baseCSS;
  }
}